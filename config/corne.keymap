/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&nice_view_spi { cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>; };

&mt {
    flavor = "tap-preferred";
    quick-tap-ms = <50>;
    retro-tap;
    require-prior-idle-ms = <50>;
};

&lt {
    flavor = "balanced";
};

/ {
    combos {
        compatible = "zmk,combos";

        left_parens {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <3 4>;
            timeout-ms = <35>
            require-prior-ms = <40>
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <15 16>;
            timeout-ms = <35>
            require-prior-ms = <40>
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <28 27>;
            timeout-ms = <35>
            require-prior-ms = <40>
        };

        right_parens {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 8>;
            timeout-ms = <35>
            require-prior-ms = <40>
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <19 20>;
            timeout-ms = <35>
            require-prior-ms = <40>
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <31 32>;
            timeout-ms = <35>
            require-prior-ms = <40>
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <19 21>;
            timeout-ms = <35>
            require-prior-ms = <40>
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <19 22>;
            timeout-ms = <35>
            require-prior-ms = <40>
        };

        single_quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <8 9>;
            timeout-ms = <35>
            require-prior-ms = <40>
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <7 18>;
            timeout-ms = <35>
            require-prior-ms = <40>
        };

        slash_2 {
            bindings = <&kp SLASH>;
            key-positions = <19 8>;
            timeout-ms = <35>
            require-prior-ms = <40>
        };

        combo_14 {
            bindings = <&kp BACKSLASH>;
            key-positions = <32 19>;
            timeout-ms = <35>
            require-prior-ms = <40>
        };

        greater {
            bindings = <&kp GREATER_THAN>;
            key-positions = <18 19>;
            timeout-ms = <35>
            require-prior-ms = <40>
        };

        equals {
            bindings = <&kp EQUAL>;
            key-positions = <6 7>;
            timeout-ms = <35>
            require-prior-ms = <40>
        };

        smaller {
            bindings = <&kp LESS_THAN>;
            key-positions = <17 16>;
            timeout-ms = <35>
            require-prior-ms = <40>
        };

        exclamation {
            bindings = <&kp EXCL>;
            key-positions = <6 5>;
            timeout-ms = <35>
            require-prior-ms = <40>
        };

        question {
            bindings = <&kp QUESTION>;
            key-positions = <17 18>;
            timeout-ms = <35>
            require-prior-ms = <40>
        };

        quote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <7 9>;
            timeout-ms = <35>
            require-prior-ms = <40>
        };

        quote_alt {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <2 4>;
            timeout-ms = <35>
            require-prior-ms = <40>
        };

        et {
            bindings = <&kp AMPS>;
            key-positions = <15 14>;
            timeout-ms = <35>
            require-prior-ms = <40>
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <14 16>;
            timeout-ms = <35>
            require-prior-ms = <40>
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <20 21>;
            timeout-ms = <35>
            require-prior-ms = <40>
        };
    };

    behaviors {
        td_lt_backspace: td_lt_backspace {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LT_BACKSPACE";
            #binding-cells = <0>;
            bindings = <&lt 2 BACKSPACE>, <&kp BACKSPACE>, <&kp BACKSPACE>;

            tapping-term-ms = <200>;
        };

        td_lt_space: td_lt_space {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LT_SPACE";
            #binding-cells = <0>;
            bindings = <&lt 1 SPACE>, <&kp SPACE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp BACKSPACE   &kp Q               &kp W           &kp E                 &kp R      &kp T           &kp Y                  &kp U             &kp I              &kp O              &kp RA(O)               &kp DELETE
&lt 4 F12       &kp A               &kp S           &kp D                 &kp F      &kp G           &kp H                  &kp J             &kp K              &kp L              &kp P                   &kp RA(F12)
&kp LEFT_SHIFT  &mt LEFT_CONTROL Z  &mt LEFT_ALT X  &kp C                 &kp V      &kp B           &kp N                  &kp M             &kp COMMA          &mt RIGHT_ALT DOT  &mt LEFT_CONTROL RA(A)  &kp LEFT_SHIFT
                                                    &mt LEFT_CONTROL ESC  &lt 3 TAB  &td_lt_space    &mt RIGHT_SHIFT ENTER  &td_lt_backspace  &mt RIGHT_GUI DEL
            >;

            label = "base";
        };

        lower {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp BACKSPACE     &kp HOME      &kp UP_ARROW  &kp END    &kp EXCL         &kp PAGE_UP    &kp HOME         &kp UP         &kp END        &kp C_PLAY_PAUSE   &kp C_VOL_UP
&trans  &kp SINGLE_QUOTE  &kp LEFT      &kp DOWN      &kp RIGHT  &kp QUESTION     &kp PAGE_DOWN  &kp LEFT         &kp DOWN       &kp RIGHT      &kp RIGHT_GUI      &kp C_VOL_DN
&trans  &kp LEFT_CONTROL  &kp LEFT_ALT  &none         &kp HASH   &kp AMPERSAND    &none          &kp LC(RS(P))    &kp LC(F2)     &kp RIGHT_ALT  &kp RIGHT_CONTROL  &trans
                                        &trans        &none      &kp SPACE        &trans         &lt 3 BACKSPACE  &kp RIGHT_GUI
            >;

            label = "nav";
        };

        raise {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp EXCL  &kp AT  &kp AMPERSAND  &kp SLASH    &kp ASTRK    &kp EQUAL   &kp N7  &kp N8   &kp N9  &kp BACKSPACE  &kp DEL
&trans  &none     &none   &kp QUESTION   &kp TILDE    &kp PLUS     &kp DOLLAR  &kp N4  &kp N5   &kp N6  &kp N0         &trans
&trans  &none     &none   &kp PIPE       &kp PERCENT  &kp CARET    &kp COLON   &kp N1  &kp N2   &kp N3  &kp DOT        &trans
                          &trans         &kp MINUS    &kp UNDER    &trans      &trans  &kp DOT
            >;

            label = "num";
        };

        functions {
            bindings = <
&bt BT_NXT  &kp BACKSPACE  &kp N7  &kp N8  &kp N9  &kp ENTER     &kp F10  &kp F7  &kp F8  &kp F9  &trans  &trans
&bt BT_PRV  &kp DOLLAR     &kp N4  &kp N5  &kp N6  &kp N0        &kp F11  &kp F4  &kp F5  &kp F6  &trans  &trans
&bt BT_CLR  &kp COLON      &kp N1  &kp N2  &kp N3  &kp PERIOD    &kp F12  &kp F1  &kp F2  &kp F3  &trans  &trans
                                   &trans  &trans  &trans        &trans   &trans  &trans
            >;

            label = "func";
        };

        nav2 {
            bindings = <
&trans  &kp HOME  &kp UP    &kp END   &kp PAGE_UP    &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LEFT  &kp DOWN  &kp DOWN  &kp PAGE_DOWN  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans    &trans    &trans    &trans         &trans    &trans  &trans  &trans  &trans  &trans  &trans
                            &trans    &trans         &trans    &trans  &trans  &trans
            >;
        };
    };
};
