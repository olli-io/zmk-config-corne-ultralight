/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35
#define THUMBS 38 37 36 39 40 41

&nice_view_spi { cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>; };

&mt {
    flavor = "balanced";
    quick-tap-ms = <100>;
};

&lt {
    flavor = "balanced";
    quick-tap-ms = <100>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>; // List of keys on the right side of the keyboard
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>; // List of keys on the left side of the keyboard
            hold-trigger-on-release;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        left_parens {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <3 4>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <15 16>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <28 27>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        right_parens {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 8>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <19 20>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <31 32>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <21 19>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <22 19>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <19 8>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <32 19>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        equals {
            bindings = <&kp EQUAL>;
            key-positions = <19 18>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        greater {
            bindings = <&kp GREATER_THAN>;
            key-positions = <31 20>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        smaller {
            bindings = <&kp LESS_THAN>;
            key-positions = <15 28>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        exclamation {
            bindings = <&kp EXCL>;
            key-positions = <18 17>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        question {
            bindings = <&kp QUESTION>;
            key-positions = <28 31>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        quotes_r {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <7 21>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        quotes_l {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <4 14>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        single_quote_l {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <3 14>;
        };

        single_quote_r {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <8 21>;
        };

        et {
            bindings = <&kp AMPS>;
            key-positions = <15 14>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <14 16>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        eur {
            bindings = <&kp RA(N4)>;
            key-positions = <4 2>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <26 28>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <3 2>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <3 16>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <31 30>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <40 38>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <20 21>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <37 40>;
        };

        minus_alt {
            bindings = <&kp MINUS>;
            key-positions = <33 32>;
        };

        asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <8 9>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <16 19>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <19 8 21>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <20 9>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        root {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp BACKSPACE     &kp Q               &kp W                &kp E             &kp R             &kp T          &kp Y                  &kp U                     &kp I              &kp O                 &kp RA(P)          &kp DELETE
&lt 4 TAB         &hml LEFT_SHIFT A   &hml LEFT_CONTROL S  &hml LEFT_ALT D   &hml RIGHT_GUI F  &kp G          &kp H                  &hmr RIGHT_GUI RIGHT_GUI  &hmr RIGHT_ALT K   &hmr RIGHT_CONTROL L  &hmr LEFT_SHIFT P  &kp RA(A)
&kp LEFT_CONTROL  &mt LEFT_CONTROL Z  &mt LEFT_ALT X       &kp C             &kp V             &kp B          &kp N                  &kp M                     &kp COMMA          &mt RIGHT_ALT DOT     &mt LCTRL RA(O)    &kp LEFT_SHIFT
                                                           &mt LEFT_GUI ESC  &lt 3 TAB         &lt 1 SPACE    &mt RIGHT_SHIFT ENTER  &lt 2 BACKSPACE           &mt RIGHT_GUI DEL
            >;

            label = "root";
        };

        navigation {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp BACKSPACE   &kp HOME                &kp UP_ARROW        &kp END                &kp PAGE_UP      &kp PAGE_UP    &kp HOME         &kp UP         &kp END    &kp C_PLAY_PAUSE   &trans
&trans  &kp LEFT_SHIFT  &hml LEFT_CONTROL LEFT  &hml LEFT_ALT DOWN  &hml LEFT_SHIFT RIGHT  &kp PAGE_DOWN    &kp PAGE_DOWN  &kp LEFT         &kp DOWN       &kp RIGHT  &kp RIGHT_CONTROL  &trans
&trans  &none           &none                   &none               &none                  &none            &none          &kp LG(P)        &kp LG(F2)     &none      &none              &trans
                                                &trans              &none                  &kp SPACE        &trans         &lt 2 BACKSPACE  &kp RIGHT_GUI
            >;

            label = "nav";
        };

        numpad {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &none  &none  &none   &none      &none        &kp EQUAL   &kp N7  &kp N8   &kp N9  &kp BACKSPACE  &kp C_VOLUME_UP
&trans  &none  &none  &none   &none      &none        &kp DOLLAR  &kp N4  &kp N5   &kp N6  &kp N0         &kp C_VOL_DN
&trans  &none  &none  &none   &none      &none        &kp COLON   &kp N1  &kp N2   &kp N3  &kp DOT        &kp C_PLAY_PAUSE
                      &trans  &kp MINUS  &kp UNDER    &trans      &trans  &kp DOT
            >;

            label = "num";
        };

        functions {
            bindings = <
&kp C_VOL_UP      &kp BACKSPACE            &kp N7                 &kp N8           &kp N9             &kp ENTER     &kp F10  &kp F7  &kp F8  &kp F9  &trans  &trans
&kp C_VOL_DN      &mt LEFT_CONTROL DOLLAR  &mt LEFT_ALT NUMBER_4  &mt LEFT_GUI N5  &mt LEFT_SHIFT N6  &kp N0        &kp F11  &kp F4  &kp F5  &kp F6  &trans  &trans
&kp C_PLAY_PAUSE  &kp COLON                &kp N1                 &kp N2           &kp N3             &kp PERIOD    &kp F12  &kp F1  &kp F2  &kp F3  &trans  &trans
                                                                  &trans           &trans             &trans        &trans   &trans  &trans
            >;

            label = "func";
        };

        Alternative {
            bindings = <
&trans  &kp HOME  &kp UP    &kp END    &kp PAGE_UP    &bt BT_CLR    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LEFT  &kp DOWN  &kp RIGHT  &kp PAGE_DOWN  &bt BT_NXT    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans    &trans    &trans     &trans         &bt BT_PRV    &trans  &trans  &trans  &trans  &trans  &trans
                            &trans     &trans         &trans        &trans  &trans  &trans
            >;

            label = "lnav";
        };
    };
};
