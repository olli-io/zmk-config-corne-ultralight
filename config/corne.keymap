/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// Timing constants
#define TAPPING_TERM_MS 200
#define QUICK_TAP_MS 175
#define REQUIRE_PRIOR_IDLE_MS 300
#define COMBO_TIMEOUT_MS 35
#define COMBO_REQUIRE_PRIOR_IDLE_MS 200

&nice_view_spi { cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>; };

&mt {
    flavor = "balanced";
    quick-tap-ms = <200>;
    hold-trigger-on-release;
};

&lt {
    flavor = "balanced";
    quick-tap-ms = <200>;
    hold-trigger-on-release;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <REQUIRE_PRIOR_IDLE_MS>;
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 12 37 39 38 36>;
            hold-trigger-on-release;
            label = "HOME_ROW_MOD_LEFT";
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <REQUIRE_PRIOR_IDLE_MS>;
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 24 25 26 27 28 29 36 38 40 41 37 12 39>;
            hold-trigger-on-release;
            label = "HOME_ROW_MOD_RIGHT";
        };

        mtcw: mod_tap_caps_word {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_CAPS_WORD";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM_MS>;
            flavor = "balanced";
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        left_parens {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <15 16>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
            require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <4 3>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
            require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <28 27>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
            require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
        };

        right_parens {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <19 20>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
            require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <8 7>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <31 32>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <21 19>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <22 19>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <19 8>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <32 19>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        equals {
            bindings = <&kp EQUAL>;
            key-positions = <20 21>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        greater {
            bindings = <&kp GREATER_THAN>;
            key-positions = <31 20>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        smaller {
            bindings = <&kp LESS_THAN>;
            key-positions = <15 28>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        exclamation {
            bindings = <&kp EXCL>;
            key-positions = <15 14>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        question {
            bindings = <&kp QUESTION>;
            key-positions = <16 19>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        quotes_r {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <7 21>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        single_quote_r {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <8 21>;
        };

        et {
            bindings = <&kp AMPS>;
            key-positions = <3 2>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <14 16>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        eur {
            bindings = <&kp RA(N4)>;
            key-positions = <4 2>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <26 28>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <26 27>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <3 16>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <8 9>;
        };

        asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <32 33>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <7 9>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <19 8 21>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <20 9>;
        };

        gaming {
            bindings = <&tog 0>;
            key-positions = <0 1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        root {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESC     &kp Q              &kp W            &kp E               &kp R                &kp T          &kp Y                 &kp U                 &kp I                &kp O             &kp RA(O)           &kp DELETE
&caps_word  &hml LEFT_SHIFT A  &hml LEFT_GUI S  &hml LEFT_ALT D     &hml LEFT_CONTROL F  &kp G          &kp H                 &hmr RIGHT_CONTROL J  &hmr RIGHT_ALT K     &hmr RIGHT_GUI L  &hmr RIGHT_SHIFT P  &kp RA(A)
&kp ENTER   &kp Z              &kp X            &kp C               &kp V                &kp B          &kp N                 &kp M                 &kp COMMA            &kp DOT           &kp MINUS           &kp RA(P)
                                                &mt LEFT_GUI CARET  &lt 3 TAB            &lt 1 SPACE    &mt LEFT_SHIFT ENTER  &lt 2 BACKSPACE       &mt RIGHT_GUI UNDER
            >;

            label = "root";
        };

        navigation {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp BACKSPACE   &kp HOME            &kp UP_ARROW        &kp END                  &kp PAGE_UP      &kp PAGE_UP    &kp HOME         &kp UP         &kp END    &none  &trans
&trans  &kp LEFT_SHIFT  &hml LEFT_GUI LEFT  &hml LEFT_ALT DOWN  &hml LEFT_CONTROL RIGHT  &kp PAGE_DOWN    &kp PAGE_DOWN  &kp LEFT         &kp DOWN       &kp RIGHT  &none  &trans
&trans  &none           &none               &none               &none                    &none            &none          &kp LG(P)        &kp LG(F2)     &none      &none  &trans
                                            &trans              &none                    &kp SPACE        &trans         &lt 2 BACKSPACE  &kp RIGHT_GUI
            >;

            label = "nav";
        };

        numr_func {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &none  &kp F7  &kp F8  &kp F9  &kp F10    &kp BACKSPACE  &kp N7               &kp N8            &kp N9                   &kp TAB              &kp C_VOLUME_UP
&trans  &none  &kp F4  &kp F5  &kp F6  &kp F11    &kp DOLLAR     &hmr LCTRL NUMBER_4  &hmr LEFT_ALT N5  &hmr RIGHT_GUI NUMBER_6  &hmr RIGHT_SHIFT N0  &kp C_VOL_DN
&trans  &none  &kp F1  &kp F2  &kp F3  &kp F12    &kp COLON      &kp N1               &kp N2            &kp N3                   &kp DOT              &kp C_PLAY_PAUSE
                       &trans  &trans  &trans     &trans         &trans               &trans
            >;

            label = "numr";
        };

        mouse_numl {
            bindings = <
&kp C_VOL_UP      &kp BACKSPACE          &kp N7              &kp N8            &kp N9                &kp DELETE    &msc SCRL_DOWN  &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &none  &bt BT_NXT
&kp C_VOL_DN      &hmr LEFT_SHIFT ENTER  &hml LGUI NUMBER_4  &hml LEFT_ALT N5  &hml LEFT_CONTROL N6  &kp N0        &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none  &bt BT_PRV
&kp C_PLAY_PAUSE  &kp COLON              &kp N1              &kp N2            &kp N3                &kp PERIOD    &none           &none           &none           &none            &none  &bt BT_CLR
                                                             &trans            &trans                &trans        &mkp LCLK       &mkp RCLK       &trans
            >;

            label = "numl";
        };

        extra_1 {
            status = "reserved"
        };

        extra_2 {
            status = "reserved"
        }
    };
};
